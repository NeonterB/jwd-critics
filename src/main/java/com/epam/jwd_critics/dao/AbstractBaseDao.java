package com.epam.jwd_critics.dao;

import com.epam.jwd_critics.exception.DaoException;
import com.epam.jwd_critics.entity.BaseEntity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

public abstract class AbstractBaseDao<K, T extends BaseEntity> {
    private static final Logger logger = LoggerFactory.getLogger(AbstractBaseDao.class);
    private Connection connection;

    public abstract List<T> getAllBetween(int begin, int end) throws DaoException;

    public abstract int getCount() throws DaoException;

    public abstract Optional<T> getEntityById(K id) throws DaoException;

    public abstract void delete(K id) throws DaoException;

    public abstract T create(T t) throws DaoException;

    public abstract void update(T t) throws DaoException;

    public abstract boolean idExists(K id) throws DaoException;

    protected int getCount(String query) throws DaoException{
        int count = 0;
        try (PreparedStatement ps = getPreparedStatement(query)) {
            ResultSet rs = ps.executeQuery();
            if (rs.next()){
                count = rs.getInt(1);
            }
        } catch (SQLException e) {
            throw new DaoException(e);
        }
        return count;
    }

    protected boolean idExists(Integer id, String idExistsQuery) throws DaoException {
        boolean result = false;
        try (PreparedStatement preparedStatement = getPreparedStatement(idExistsQuery)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    result = resultSet.getInt(1) != 0;
                }
            }
        } catch (SQLException e) {
            throw new DaoException(e);
        }
        return result;
    }

    public void setConnection(Connection connection) {
        if (this.connection == null) {
            this.connection = connection;
        }
    }

    public PreparedStatement getPreparedStatement(String sql) {
        PreparedStatement ps = null;
        try {
            ps = connection.prepareStatement(sql);
        } catch (SQLException e) {
            logger.error(e.getMessage(), e);
        }
        return ps;
    }

    public PreparedStatement getPreparedStatement(String sql, int autoGeneratedKeys) {
        PreparedStatement ps = null;
        try {
            ps = connection.prepareStatement(sql, autoGeneratedKeys);
        } catch (SQLException e) {
            logger.error(e.getMessage(), e);
        }
        return ps;
    }

    protected int executeQueryAndGetGeneratesKeys(PreparedStatement ps) throws DaoException {
        int generatedKey = 0;
        try {
            int updatedRowCount = ps.executeUpdate();
            if (updatedRowCount == 1) {
                ResultSet resultSet = ps.getGeneratedKeys();
                if (resultSet.next()) {
                    generatedKey = resultSet.getInt(1);
                }
            } else {
                throw new DaoException("Statement " + ps + " haven't altered any rows");
            }
        } catch (SQLException e) {
            throw new DaoException(e.getMessage());
        }
        return generatedKey;
    }
}
